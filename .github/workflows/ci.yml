name: ci
on:
  pull_request:
  push:
    branches: [dev, '**/phase*']
    tags: ['v*.*.*']

env:
  GO_VERSION: "1.24.x"
  GOLANGCI_INSTALL_VERSION: "latest"
  CACHE_DIR: ${{ github.workspace }}/go-cache

jobs:
  test-linux:
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
            | sh -s -- -b "$(go env GOPATH)/bin" "${{ env.GOLANGCI_INSTALL_VERSION }}"
          golangci-lint --version
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - run: make lint test
        shell: bash
  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
            | sh -s -- -b "$(go env GOPATH)/bin" "${{ env.GOLANGCI_INSTALL_VERSION }}"
          golangci-lint --version
      - name: Clean cache
        run: rm -rf "${{ env.CACHE_DIR }}"
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - run: make lint test
        shell: bash
  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Set GOMAXPROCS
        shell: pwsh
        run: echo "GOMAXPROCS=$Env:NUMBER_OF_PROCESSORS" >> $Env:GITHUB_ENV
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
            | sh -s -- -b "$(go env GOPATH)/bin" "${{ env.GOLANGCI_INSTALL_VERSION }}"
          golangci-lint --version
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - run: make lint test
        shell: bash
  coverage-gate:
    runs-on: [self-hosted, linux]
    needs: [test-linux, test-macos, test-windows]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
      - run: |
          go test -race -covermode=atomic -coverprofile=coverage.out -tags unit ./...
          pct=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%","");print $3}')
          if [ ${pct%.*} -lt 92 ]; then echo "::error::coverage < 92%" && exit 1; fi
      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
  security-scan:
    runs-on: [self-hosted, linux]
    needs: coverage-gate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - run: make security-scan
  embed-drift:
    needs: security-scan
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
      - run: make embed-check
  docs:
    runs-on: [self-hosted, linux]
    needs: embed-drift
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Generate Docs
        run: |
          make docs
          git config --global user.name "Jamal Al-Sarraf"
          git config --global user.email "jalsarraf0@gmail.com"
          git add .
          git commit -m "Update generated documentation" || echo "No changes to commit"

  snapshot:
    runs-on: [self-hosted, linux]
    needs: docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
      - run: make snapshot
      - uses: actions/upload-artifact@v4
        with:
          name: snapshot
          path: dist

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [self-hosted, linux]
    needs: docs
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Install Cosign
        run: go install github.com/sigstore/cosign/v2/cmd/cosign@latest
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
      - run: goreleaser release --clean --skip=publish
      - name: Sign & attach SBOM
        run: |
          cosign sign --yes dist/*.tar.gz
          cosign attach sbom --yes dist/*.tar.gz
