name: ci

on:
  pull_request:
  push:
    branches:
      - dev
      - '**/phase*'
    tags:
      - 'v*.*.*'
  schedule:
    - cron: '0 2 * * *'   # nightly snapshot (UTC)

env:
  GO_VERSION: '1.24.x'
  CACHE_DIR: ${{ github.workspace }}/go-cache

# ──────────────────────────
# Continuous Integration
# ──────────────────────────
jobs:

  # ---------- Unit tests (Linux) ----------
  unit-linux:
    runs-on: [self-hosted, Linux, X64, quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Pre-flight
        run: ./scripts/preflight-ci.sh
      - name: Export GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> "$GITHUB_ENV"
      - name: Run slice tests (4)
        run: |
          for n in 1 2 3 4; do CASE=$n/4 ./scripts/test-slice.sh; done
          gocovmerge cover*.out > coverage.out
      - uses: actions/upload-artifact@v4
        with:
          name: cov-linux
          path: coverage.out

  # ---------- Quality gate ----------
  quality:
    needs: unit-linux
    runs-on: [self-hosted, Linux, X64, quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: cov-linux
          path: .
      - name: Merge coverage & enforce 93-96 %
        run: |
          go install github.com/wadey/gocovmerge@latest
          # already merged, but keep step idempotent
          go run scripts/coverage-helper.go coverage.out 93 96

  # ---------- Security scan ----------
  security:
    needs: quality
    runs-on: [self-hosted, Linux, X64, quality]
    steps:
      - uses: actions/checkout@v4
      - name: Security suite
        run: make security-scan

  # ---------- Build (Linux) ----------
  build-linux:
    needs: security
    runs-on: [self-hosted, Linux, X64, quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Export GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> "$GITHUB_ENV"
      - name: Build binary
        run: GOOS=linux GOARCH=amd64 make build
      - uses: actions/upload-artifact@v4
        with:
          name: bin-linux
          path: bin/ai-chat-cli-linux-amd64

# ──────────────────────────
# Continuous Delivery
# ──────────────────────────

  # ---------- Snapshot (nightly) ----------
  snapshot:
    if: github.event_name == 'schedule'
    needs: build-linux
    runs-on: [self-hosted, Linux, X64, quality]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bin-linux
          path: dist
      - name: Package snapshot
        run: |
          zip -j snapshot-${{ github.run_id }}.zip dist/*
          syft packages dist -o spdx-json > sbom.json
      - uses: actions/upload-artifact@v4
        with:
          name: snapshot-${{ github.run_id }}
          path: snapshot-${{ github.run_id }}.zip

  # ---------- Release (tag) ----------
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-linux, quality, security]
    runs-on: [self-hosted, Linux, X64, quality]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bin-linux
          path: dist
      - name: Sign binary
        run: cosign sign --yes dist/ai-chat-cli-linux-amd64
      - uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/ai-chat-cli-linux-amd64
            dist/ai-chat-cli-linux-amd64.sig
            sbom.json

  # ---------- Publish artefacts to registry ----------
  publish-artefacts:
    needs: release
    runs-on: [self-hosted, Linux, X64, quality]
    environment: artefact-registry
    permissions: { contents: read }
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bin-linux
          path: dist
      - name: Download SBOM
        run: echo "${{ secrets.SBOM_CONTENT }}" > dist/sbom.json || true
      - name: Push OCI artefact
        run: |
          echo "${{ secrets.REGISTRY_TOKEN }}" | \
            oras login --username ci --password-stdin ${{ secrets.REGISTRY_HOST }}
          oras push ${{ secrets.REGISTRY_HOST }}/ai-chat/cli:v${{ github.ref_name }} \
            dist/ai-chat-cli-linux-amd64:application/x-executable \
            dist/sbom.json:application/spdx+json

  # ---------- Deploy to staging ----------
  deploy-staging:
    needs: publish-artefacts
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.ai-chat.internal
    steps:
      - name: Pull artefact
        run: |
          oras pull ${{ secrets.REGISTRY_HOST }}/ai-chat/cli:v${{ github.ref_name }} \
            --output /tmp/cli
      - name: Helm upgrade
        run: |
          helm upgrade --install ai-chat-staging charts/ai-chat \
            --namespace ai-chat-staging \
            --set image.registry=${{ secrets.REGISTRY_HOST }} \
            --set image.tag=v${{ github.ref_name }}
      - name: Smoke tests
        run: kubectl -n ai-chat-staging rollout status deploy/ai-chat && \
             ./infra/tests/smoke-staging.sh

  # ---------- Deploy to production (approval gate) ----------
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://ai-chat.internal
    steps:
      - name: Pull artefact
        run: |
          oras pull ${{ secrets.REGISTRY_HOST }}/ai-chat/cli:v${{ github.ref_name }} \
            --output /tmp/cli
      - name: Helm upgrade
        run: |
          helm upgrade --install ai-chat charts/ai-chat \
            --namespace ai-chat \
            --set image.registry=${{ secrets.REGISTRY_HOST }} \
            --set image.tag=v${{ github.ref_name }}
      - name: Confirm rollout
        run: kubectl -n ai-chat rollout status deploy/ai-chat
