name: ci
on:
  pull_request:
  push:
    branches: [dev, '**/phase*']
    tags: ['v*.*.*']

env:
  GO_VERSION: "1.24.x"
  GOLANGCI_INSTALL_VERSION: "latest"
  CACHE_DIR: ${{ github.workspace }}/go-cache

jobs:
  test:
    name: unit-coverage (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            runs-on: [self-hosted, linux]
            shell: bash
          - os: macos
            runs-on: macos-latest
            shell: bash
          - os: windows
            runs-on: windows-latest
            shell: pwsh

    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set GOMAXPROCS
        run: |
          if [[ "${{ matrix.os }}" == "linux" ]]; then
            echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos" ]]; then
            echo "GOMAXPROCS=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
          else
            echo "GOMAXPROCS=$Env:NUMBER_OF_PROCESSORS" >> $Env:GITHUB_ENV
          fi

      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh install_tools
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ matrix.os }}-go-${{ hashFiles('**/go.sum') }}

      - run: make lint unit
      - run: make coverage-gate
      - run: make security-scan
  embed-drift:
    needs: test
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
      - run: make embed-check
  docs:
    runs-on: [self-hosted, linux]
    needs: embed-drift
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Generate Docs
        run: |
          make docs
          git config --global user.name "Jamal Al-Sarraf"
          git config --global user.email "jalsarraf0@gmail.com"
          git add .
          git commit -m "Update generated documentation" || echo "No changes to commit"

  snapshot:
    runs-on: [self-hosted, linux]
    needs: docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
      - run: make snapshot
      - uses: actions/upload-artifact@v4
        with:
          name: snapshot
          path: dist

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [self-hosted, linux]
    needs: docs
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Install Cosign
        run: go install github.com/sigstore/cosign/v2/cmd/cosign@latest
      - name: Set GOMAXPROCS
        run: echo "GOMAXPROCS=$(nproc)" >> $GITHUB_ENV
      - run: goreleaser release --clean --skip=publish
      - name: Sign & attach SBOM
        run: |
          cosign sign --yes dist/*.tar.gz
          cosign attach sbom --yes dist/*.tar.gz
