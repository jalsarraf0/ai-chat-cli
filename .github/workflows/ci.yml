name: ci
on:
  pull_request:
  push:
    branches: [dev, '**/phase*']
    tags: ['v*.*.*']

env:
  GO_VERSION: "1.24.x"
  GOLANGCI_INSTALL_VERSION: "latest"
  CACHE_DIR: ${{ github.workspace }}/go-cache

jobs:
  test:
    name: unit-coverage (${{ matrix.name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-slice-0
            slice: 0/4
            runs-on: [self-hosted, Linux, docker]
            shell: bash
          - name: linux-slice-1
            slice: 1/4
            runs-on: [self-hosted, Linux, docker]
            shell: bash
          - name: linux-slice-2
            slice: 2/4
            runs-on: [self-hosted, Linux, docker]
            shell: bash
          - name: linux-slice-3
            slice: 3/4
            runs-on: [self-hosted, Linux, docker]
            shell: bash
          - name: windows
            slice: full
            runs-on: [self-hosted, Windows, quality]
            shell: pwsh
          - name: macos
            slice: full
            runs-on: macos-latest
            shell: bash

    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Tidy modules
        run: |
          go mod tidy --go=1.24
          go mod verify


      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh install_tools
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1

      - name: Export GOMAXPROCS (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "GOMAXPROCS=$(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu)" >> $GITHUB_ENV
      - name: Export GOMAXPROCS (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "GOMAXPROCS=$Env:NUMBER_OF_PROCESSORS" >> $Env:GITHUB_ENV

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ matrix.name }}-go-${{ hashFiles('**/go.sum') }}

      - name: Lint
        run: make lint
      - name: Unit tests
        run: |
          CASE="${{ matrix.slice }}"
          if [[ "$CASE" == */* ]]; then
            gotestsum --subset "$CASE" --packages ./... --coverprofile=coverage.out -- -race -covermode=atomic
          else
            go test -race -covermode=atomic -coverprofile=coverage.out ./...
          fi
      - name: Coverage gate
        run: make coverage-gate
      - name: Security scan
        run: make security-scan

  quality:
    needs: test
    runs-on: [self-hosted, linux, quality]
    steps:
      - uses: actions/checkout@v4        # repo already present on runner
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.x
          cache: true

      - name: Bootstrap tools
        run: ./scripts/bootstrap-tools.sh install_tools

      - name: Lint (all linters)
        run: golangci-lint run ./...

      - name: Staticcheck
        run: staticcheck ./...

      - name: Security scan – gosec
        run: gosec ./...

      - name: Security scan – govulncheck
        run: govulncheck ./...

  bench:
    needs: quality
    runs-on: [self-hosted, Linux, docker]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.x
      - run: make bench-json
      - uses: actions/upload-artifact@v4
        with:
          name: bench
          path: bench.json
  embed-drift:
    needs: test
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - run: make embed-check
  docs:
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: make docs

  snapshot:
    runs-on: [self-hosted, linux]
    needs: docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - run: make snapshot
      - uses: actions/upload-artifact@v4
        with:
          name: snapshot
          path: dist

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [self-hosted, linux]
    needs: docs
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Install Cosign
        run: go install github.com/sigstore/cosign/v2/cmd/cosign@latest
      - run: goreleaser release --clean --skip=publish
      - name: Sign & attach SBOM
        run: |
          cosign sign --yes dist/*.tar.gz
          cosign attach sbom --yes dist/*.tar.gz
