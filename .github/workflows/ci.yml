name: CI

on:
  push:
    branches: [dev]
  pull_request: {}

jobs:

  # ──────────────── 1. Lint ────────────────────────────────────────────────
  lint:
    runs-on: [self-hosted, linux]      # stay on your own runner
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with: {go-version-file: 'go.mod'}

      # ------- fix #1: wipe conflicting cache before restore --------------
      - name: Clear Go module cache
        run: |
          echo "Deleting $GOPATH/pkg/mod to avoid tar overwrite errors"
          rm -rf "$GOPATH/pkg/mod"
          mkdir -p "$GOPATH/pkg/mod"

      - name: Restore Go module cache
        uses: actions/cache@v4
        with:
          path: ${{ env.GOPATH }}/pkg/mod
          key: go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: go-mod-

      # ------- fix #2: install golangci-lint correctly --------------------
      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Run linter
        run: golangci-lint run --timeout 5m

  # ──────────────── 2. Test Matrix ────────────────────────────────────────
  test-matrix:
    needs: lint
    runs-on: [self-hosted, linux]

    strategy:
      matrix:
        go: [ '1.24' ]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      # expose $GOPATH/bin to subsequent shell steps
      - name: Add Go bin to PATH
        run: echo "$HOME/go/bin" >> "$GITHUB_PATH"

      - name: Run tests (93 % min)
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...
          pct=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%","");print $3}')
          echo "total coverage = ${pct}%"
          if [[ ${pct%.*} -lt 93 ]]; then
            echo "::error ::coverage ${pct}% < 93%" && exit 1
          fi

      - name: Upload coverage profile
        uses: actions/upload-artifact@v4
        with:
          name: coverage-out
          path: coverage.out


  # ──────────────── 3. Security ───────────────────────────────────────────
  security:
    needs: test-matrix
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: {go-version-file: 'go.mod'}

      - name: Install scanners
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install github.com/google/osv-scanner/cmd/osv-scanner@latest
          curl -fsSL https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0_Linux-64bit.tar.gz \
            | tar -xzO trivy > /usr/local/bin/trivy
          chmod +x /usr/local/bin/trivy
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - run: govulncheck ./...
      - run: gosec ./...
      - run: osv-scanner .
      - run: trivy fs --exit-code 1 --severity HIGH,CRITICAL .

