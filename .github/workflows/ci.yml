name: ci

on:
  pull_request:
  push:
    branches: [dev, '**/phase*']
    tags: ['v*.*.*']
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target:
        description: 'Run ONE job (leave blank for full pipeline)'
        required: false
        default: ""

permissions:
  contents: write
  packages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: 1.24.x
  CACHE_DIR: ${{ github.workspace }}/go-cache

jobs:

  unit:
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v4
      - name: Ensure global tools in PATH
        run: echo "/usr/local/bin:$HOME/go/bin:$PATH" >> $GITHUB_PATH
      - run: ./scripts/preflight-ci.sh
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: echo "GOMAXPROCS=$(nproc)" >> "$GITHUB_ENV"
      - name: Unit tests (race + coverage)
        run: |
          if ! ls -1 **/*.go 2>/dev/null | grep -q .; then
            echo 'package main' > dummy.go
          fi
          go test -race -covermode=atomic -coverprofile=coverage-linux.out -tags unit ./...
      - uses: actions/upload-artifact@v4
        with:
          name: cov-linux
          path: coverage-linux.out

  quality:
    needs: unit
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v4
      - name: Ensure global tools in PATH
        run: echo "/usr/local/bin:$HOME/go/bin:$PATH" >> $GITHUB_PATH
      - run: ./scripts/preflight-ci.sh
      - uses: actions/download-artifact@v4
        with:
          path: cov
      - name: Merge & enforce ≥93 % coverage
        run: |
          PROFILES=$(find cov -type f -name '*.out' -o -name '*.cov')
          if [[ -z "$PROFILES" ]]; then
            echo "docs-only change — coverage = 100 %"; exit 0
          fi
          gocovmerge $PROFILES > all.cov
          pct=$(go tool cover -func all.cov | awk '/total:/ {gsub("%","");print $3}')
          echo "coverage=$pct"
          awk -v p="$pct" 'BEGIN {exit(p < 93)}'
      - run: golangci-lint run

  security:
    needs: quality
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v4
      - name: Ensure global tools in PATH
        run: echo "/usr/local/bin:$HOME/go/bin:$PATH" >> $GITHUB_PATH
      - run: ./scripts/preflight-ci.sh
      - name: Ensure scripts executable
        run: find . -type f -name '*.sh' ! -executable -print -exec chmod +x {} +
      - run: gosec ./...
      - run: addlicense -check $(go list -f '{{.Dir}}' ./...)
      - run: GOOS=linux GOARCH=amd64 go build -o bin/ai-chat-cli-linux-amd64 .
      - name: govulncheck (retry once)
        run: |
          for i in 1 2; do
            govulncheck ./... && break || { echo "retry $i"; sleep 4; }
          done
      - uses: actions/cache@v4
        with:
          path: ~/.cache/trivy/db
          key: ${{ runner.os }}-trivy-db-${{ hashFiles('**/go.sum') }}
      - id: trivy
        run: trivy fs --severity HIGH,CRITICAL --exit-code 1 .
        continue-on-error: true
      - if: steps.trivy.outcome == 'failure'
        run: trivy fs --skip-db-update --severity HIGH,CRITICAL --exit-code 1 .

  build-linux:
    needs: security
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v4
      - name: Ensure global tools in PATH
        run: echo "/usr/local/bin:$HOME/go/bin:$PATH" >> $GITHUB_PATH
      - run: ./scripts/preflight-ci.sh
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: echo "GOMAXPROCS=$(nproc)" >> "$GITHUB_ENV"
      - run: GOOS=linux GOARCH=amd64 make build
      - run: govulncheck -mode=binary bin/ai-chat-cli-linux-amd64
      - run: goreleaser --clean --snapshot
      - uses: actions/upload-artifact@v4
        with:
          name: bin-linux
          path: bin/ai-chat-cli-linux-amd64

  docs:
    needs: build-linux
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v4
      - name: Ensure global tools in PATH
        run: echo "/usr/local/bin:$HOME/go/bin:$PATH" >> $GITHUB_PATH
      - run: ./scripts/preflight-ci.sh
      - run: make docs

  publish-artefacts:
    needs: docs
    runs-on: [self-hosted, Linux, X64]
    environment: artefact-registry
    steps:
      - uses: actions/checkout@v4
      - name: Ensure global tools in PATH
        run: echo "/usr/local/bin:$HOME/go/bin:$PATH" >> $GITHUB_PATH
      - run: ./scripts/preflight-ci.sh
      - uses: actions/download-artifact@v4
        with:
          name: bin-linux
          path: dist
      - run: echo "${{ secrets.SBOM_CONTENT }}" > dist/sbom.json || true
      - name: Push OCI artefact
        run: |
          echo "${{ secrets.REGISTRY_TOKEN }}" | \
            oras login --username ci --password-stdin ${{ secrets.REGISTRY_HOST }}
          oras push ${{ secrets.REGISTRY_HOST }}/ai-chat/cli:v${{ github.ref_name }} \
            dist/ai-chat-cli-linux-amd64:application/x-executable \
            dist/sbom.json:application/spdx+json

  deploy-staging:
    needs: publish-artefacts
    runs-on: [self-hosted, Linux, X64]
    environment:
      name: staging
      url: https://staging.ai-chat.internal
    steps:
      - uses: actions/checkout@v4
      - name: Ensure global tools in PATH
        run: echo "/usr/local/bin:$HOME/go/bin:$PATH" >> $GITHUB_PATH
      - run: ./scripts/preflight-ci.sh
      - name: Pull artefact
        run: oras pull ${{ secrets.REGISTRY_HOST }}/ai-chat/cli:v${{ github.ref_name }} --output /tmp/cli
      - name: Helm upgrade
        run: |
          helm upgrade --install ai-chat-staging charts/ai-chat \
            --namespace ai-chat-staging \
            --set image.registry=${{ secrets.REGISTRY_HOST }} \
            --set image.tag=v${{ github.ref_name }}
      - run: |
          kubectl -n ai-chat-staging rollout status deploy/ai-chat
          ./infra/tests/smoke-staging.sh

  deploy-production:
    needs: deploy-staging
    runs-on: [self-hosted, Linux, X64]
    environment:
      name: production
      url: https://ai-chat.internal
    steps:
      - uses: actions/checkout@v4
      - name: Ensure global tools in PATH
        run: echo "/usr/local/bin:$HOME/go/bin:$PATH" >> $GITHUB_PATH
      - run: ./scripts/preflight-ci.sh
      - name: Pull artefact
        run: oras pull ${{ secrets.REGISTRY_HOST }}/ai-chat/cli:v${{ github.ref_name }} --output /tmp/cli
      - name: Helm upgrade
        run: |
          helm upgrade --install ai-chat charts/ai-chat \
            --namespace ai-chat \
            --set image.registry=${{ secrets.REGISTRY_HOST }} \
            --set image.tag=v${{ github.ref_name }}
      - run: kubectl -n ai-chat rollout status deploy/ai-chat
