name: ci
on:
  pull_request:
  push:
    branches: [dev, '**/phase*']
    tags: ['v*.*.*']

env:
  GO_VERSION: "1.24.x"
  GOLANGCI_INSTALL_VERSION: "latest"
  CACHE_DIR: ${{ github.workspace }}/go-cache

jobs:
  unit-linux:
    runs-on: [self-hosted, linux]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Tidy modules
        run: |
          go mod tidy --go=1.24
          go mod verify


      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh install_tools

      - name: Export GOMAXPROCS
        run: echo "GOMAXPROCS=$(getconf _NPROCESSORS_ONLN)" >> $GITHUB_ENV

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: linux-go-${{ hashFiles('**/go.sum') }}

      - name: Lint
        run: make lint
      - name: Unit tests
        run: make unit
      - name: Coverage gate
        run: make coverage-gate
      - name: Security scan
        run: make security-scan

  unit-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Tidy modules
        run: |
          go mod tidy --go=1.24
          go mod verify
      - name: Bootstrap critical tools (Windows)
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Export GOMAXPROCS
        shell: pwsh
        run: echo "GOMAXPROCS=$Env:NUMBER_OF_PROCESSORS" >> $Env:GITHUB_ENV
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: windows-go-${{ hashFiles('**/go.sum') }}
      - name: Lint
        run: make lint
      - name: Unit tests
        run: make unit
      - name: Coverage gate
        run: make coverage-gate
      - name: Security scan
        run: make security-scan

  unit-macos:
    needs: [unit-linux, unit-windows]
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Tidy modules
        run: |
          go mod tidy --go=1.24
          go mod verify
      - name: Bootstrap critical tools
        run: ./scripts/bootstrap-tools.sh install_tools
      - name: Export GOMAXPROCS
        run: echo "GOMAXPROCS=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: macos-go-${{ hashFiles('**/go.sum') }}
      - name: Lint
        run: make lint
      - name: Unit tests
        run: make unit
      - name: Coverage gate
        run: make coverage-gate
      - name: Security scan
        run: make security-scan

  quality:
    needs: [unit-linux, unit-windows, unit-macos]
    runs-on: [self-hosted, linux, quality]
    steps:
      - uses: actions/checkout@v4        # repo already present on runner
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.x
          cache: true

      - name: Bootstrap tools
        run: ./scripts/bootstrap-tools.sh install_tools

      - name: Lint (all linters)
        run: golangci-lint run ./...

      - name: Staticcheck
        run: staticcheck ./...

      - name: Security scan – gosec
        run: gosec ./...

      - name: Security scan – govulncheck
        run: govulncheck ./...

      - name: Merge coverage & gate
        shell: bash
        run: |
          set -eo pipefail
          go install github.com/wadey/gocovmerge@latest
          gocovmerge $(find . -type f -name 'coverage.out') > all.cov
          go tool cover -func all.cov | grep total:
          TOTAL=$(go tool cover -func all.cov | awk '/total:/ {print $3}' | tr -d '%')
          echo "Combined coverage: $TOTAL%"
          MIN=90
          if (( $(echo "$TOTAL < $MIN" | bc -l) )); then
            echo "::error ::Coverage $TOTAL% below $MIN%"
            exit 1
          fi
  embed-drift:
    needs: [unit-linux, unit-windows, unit-macos]
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - run: make embed-check
  docs:
    needs: quality
    runs-on: [self-hosted, Linux, X64, quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Build docs
        run: |
          npm ci
          npx mdbook build docs
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/book

  snapshot:
    runs-on: [self-hosted, Linux, X64, quality]
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: make build-linux
      - run: syft packages dist/ai-chat-cli-linux-amd64 --file dist/sbom.spdx
      - uses: actions/upload-artifact@v4
        with:
          name: nightly-linux
          path: dist/*

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [self-hosted, Linux, X64, quality]
    needs: [snapshot, quality]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Install Cosign
        run: go install github.com/sigstore/cosign/v2/cmd/cosign@latest
      - run: goreleaser release --clean --skip=publish
      - name: Sign & attach SBOM
        run: |
          cosign sign --yes dist/*.tar.gz
          cosign attach sbom --yes dist/*.tar.gz
