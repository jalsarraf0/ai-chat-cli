name: ci
on:
  pull_request:
  push:
    branches: [dev, '**/phase*']
    tags: ['v*.*.*']

env:
  GO_VERSION: "1.24.x"
  GOLANGCI_INSTALL_VERSION: "latest"
  CACHE_DIR: ${{ github.workspace }}/go-cache

jobs:
  unit-linux:
    runs-on: [self-hosted, Linux, X64, quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Unit tests (Linux)
        run: ./scripts/test-slice.sh
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: cov-linux-${{ strategy.job-index }}
          path: coverage.out

  unit-windows:
    runs-on: [self-hosted, Windows, X64, quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install GNU Make 4.4.1
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $url = 'https://github.com/maweil/MakeForWindows/releases/download/v4.4.1/make-bin-win64.zip'
          $zip = Join-Path $env:RUNNER_TEMP 'make.zip'
          Invoke-WebRequest -Uri $url -OutFile $zip -UseBasicParsing
          Expand-Archive $zip -DestinationPath $env:RUNNER_TEMP\make
          "$env:RUNNER_TEMP\make\make-4.4.1\dist" | Out-File -FilePath $env:GITHUB_PATH -Encoding ascii -Append
      - name: Unit tests (Windows)
        run: ./scripts/test-slice.sh
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: cov-windows-${{ strategy.job-index }}
          path: coverage.out

  unit-macos:
    runs-on: macos-latest
    needs: [unit-linux, unit-windows]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Unit tests (macOS)
        run: ./scripts/test-slice.sh

  quality:
    needs: unit-linux
    runs-on: [self-hosted, linux, quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { pattern: cov-*, merge-multiple: true }
      - uses: actions/setup-go@v5
        with: { go-version: '1.24.x' }
      - run: |
          go install github.com/wadey/gocovmerge@latest
          gocovmerge $(find . -name 'coverage.out') > all.cov
          go tool cover -func all.cov | grep total:
          TOTAL=$(go tool cover -func all.cov | awk '/total:/ {print $3}' | tr -d '%')
          awk -v t="$TOTAL" 'BEGIN {exit (t < 92)}'

  bench:
    runs-on: [self-hosted, linux, quality]
    needs: unit-linux
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: '1.24.x' }
      - name: Run benchmarks
        run: go test -bench ./... -benchmem -run=^$ | tee bench.txt
      - name: Upload bench artefact
        uses: actions/upload-artifact@v4
        with: { name: bench-linux, path: bench.txt }
  embed-drift:
    needs: unit-linux
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - run: make embed-check
  docs:
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: make docs

  snapshot:
    runs-on: [self-hosted, linux]
    needs: docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - run: make snapshot
      - uses: actions/upload-artifact@v4
        with:
          name: snapshot
          path: dist

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [self-hosted, linux]
    needs: docs
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh
      - name: Bootstrap critical tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Install Cosign
        run: go install github.com/sigstore/cosign/v2/cmd/cosign@latest
      - run: goreleaser release --clean --skip=publish
      - name: Sign & attach SBOM
        run: |
          cosign sign --yes dist/*.tar.gz
          cosign attach sbom --yes dist/*.tar.gz
