name: ci
on:
  pull_request:
  push:
    branches: [dev, '**/phase*']
    tags: ['v*.*.*']

env:
  GO_VERSION: '1.24.x'

jobs:
  unit-linux:

    runs-on: [self-hosted, Linux, X64, quality]

    runs-on: [self-hosted, linux]
    defaults:
      run:
        shell: bash


    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests
        shell: bash
        run: ./scripts/test-slice.sh
      - uses: actions/upload-artifact@v4
        with:
          name: cov-${{ runner.os }}-${{ strategy.job-index }}
          path: coverage.out

  unit-windows:
    runs-on: [self-hosted, Windows, X64, quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run tests
        shell: bash
        run: ./scripts/test-slice.sh
      - uses: actions/upload-artifact@v4
        with:
          name: cov-${{ runner.os }}-${{ strategy.job-index }}
          path: coverage.out

          cache: true

      - name: Tidy modules
        run: |
          go mod tidy --go=1.24
          go mod verify


      - name: Bootstrap critical tools
        if: runner.os != 'Windows'
        run: ./scripts/bootstrap-tools.sh install_tools

      - name: Export GOMAXPROCS
        run: echo "GOMAXPROCS=$(getconf _NPROCESSORS_ONLN)" >> $GITHUB_ENV

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: linux-go-${{ hashFiles('**/go.sum') }}

      - name: Lint
        run: make lint
      - name: Unit tests
        run: make unit
      - name: Coverage gate
        run: make coverage-gate
      - name: Security scan
        run: make security-scan

  unit-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Tidy modules
        run: |
          go mod tidy --go=1.24
          go mod verify
      - name: Bootstrap critical tools (Windows)
        shell: pwsh
        run: ./scripts/bootstrap.ps1
      - name: Export GOMAXPROCS
        shell: pwsh
        run: echo "GOMAXPROCS=$Env:NUMBER_OF_PROCESSORS" >> $Env:GITHUB_ENV
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: windows-go-${{ hashFiles('**/go.sum') }}
      - name: Lint
        run: make lint
      - name: Unit tests
        run: make unit
      - name: Coverage gate
        run: make coverage-gate
      - name: Security scan
        run: make security-scan


  unit-macos:
    needs: [unit-linux, unit-windows]
    runs-on: macos-latest


    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests
        shell: bash
        run: ./scripts/test-slice.sh
      - uses: actions/upload-artifact@v4
        with:
          name: cov-${{ runner.os }}-${{ strategy.job-index }}
          path: coverage.out

  quality:
    needs: unit-linux
    runs-on: [self-hosted, Linux, X64, quality]

          cache: true
      - name: Tidy modules
        run: |
          go mod tidy --go=1.24
          go mod verify
      - name: Bootstrap critical tools
        run: ./scripts/bootstrap-tools.sh install_tools
      - name: Export GOMAXPROCS
        run: echo "GOMAXPROCS=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: macos-go-${{ hashFiles('**/go.sum') }}
      - name: Lint
        run: make lint
      - name: Unit tests
        run: make unit
      - name: Coverage gate
        run: make coverage-gate
      - name: Security scan
        run: make security-scan

  quality:
    needs: [unit-linux, unit-windows, unit-macos]
    runs-on: [self-hosted, linux, quality]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/download-artifact@v4
        with:
          path: .
      - name: Merge coverage & gate
        shell: bash
        run: |
          go install github.com/wadey/gocovmerge@v0.0.0-20160331181800-b5bfa59ec0ad
          gocovmerge $(find . -type f -name 'coverage.out') > all.cov

          go tool cover -func all.cov | tee cover.txt
          TOTAL=$(awk '/total:/{sub(/%/,"" );print $3}' cover.txt)
          if (( $(echo "$TOTAL < 93" | bc -l) )); then
            echo "::error ::Coverage $TOTAL% < 93%"; exit 1; fi

  security:
    needs: quality
    runs-on: [self-hosted, Linux, X64, quality]

          go tool cover -func all.cov | grep total:
          TOTAL=$(go tool cover -func all.cov | awk '/total:/ {print $3}' | tr -d '%')
          echo "Combined coverage: $TOTAL%"
          MIN=90
          if (( $(echo "$TOTAL < $MIN" | bc -l) )); then
            echo "::error ::Coverage $TOTAL% below $MIN%"
            exit 1
          fi
  embed-drift:
    needs: [unit-linux, unit-windows, unit-macos]
    runs-on: [self-hosted, linux]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: GoSec
        run: gosec ./...
      - name: Trivy
        run: trivy fs --exit-code 1 --severity HIGH,CRITICAL .

  docs:

    needs: security
    runs-on: ubuntu-latest

    needs: quality
    runs-on: [self-hosted, Linux, X64, quality]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Build docs
        run: |
          npm ci
          npx mdbook build docs
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/book


  build-matrix:
    needs: security
    strategy:
      matrix:
        target:
          - id: linux
            runner: "[self-hosted, Linux, X64, quality]"
            GOOS: linux
            GOARCH: amd64
          - id: windows
            runner: "[self-hosted, Windows, X64, quality]"
            GOOS: windows
            GOARCH: amd64
          - id: darwin
            runner: macos-latest
            GOOS: darwin
            GOARCH: amd64
    runs-on: ${{ fromJson(matrix.target.runner) }}

  snapshot:
    runs-on: [self-hosted, Linux, X64, quality]
    if: github.event_name == 'schedule'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: GOOS=${{ matrix.target.GOOS }} GOARCH=${{ matrix.target.GOARCH }} make build
      - uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.target.id }}
          path: bin

  snapshot:
    needs: build-matrix
    runs-on: [self-hosted, Linux]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bin-linux
          path: dist/linux
      - uses: actions/download-artifact@v4
        with:
          name: bin-windows
          path: dist/windows
      - uses: actions/download-artifact@v4
        with:
          name: bin-darwin
          path: dist/darwin
      - run: |
          zip -r snapshot-${{ github.run_id }}.zip dist
          syft packages dist -o spdx-json > sbom.json
      - uses: actions/upload-artifact@v4
        with:
          name: snapshot-${{ github.run_id }}
          path: snapshot-${{ github.run_id }}.zip

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [quality, security, snapshot]
    runs-on: [self-hosted, Linux]

      - run: make build-linux
      - run: syft packages dist/ai-chat-cli-linux-amd64 --file dist/sbom.spdx
      - uses: actions/upload-artifact@v4
        with:
          name: nightly-linux
          path: dist/*

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [self-hosted, Linux, X64, quality]
    needs: [snapshot, quality]
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: bin-linux
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: bin-windows
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: bin-darwin
          path: .
      - name: Sign binaries
        run: cosign sign --yes bin-*
      - uses: softprops/action-gh-release@v2
        with:
          files: bin-* sbom.json
