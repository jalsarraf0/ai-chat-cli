name: CI

# ─────────────────────────────────────────────────────────────────────────────
#  Global settings (re-usable in every shell step)
# ─────────────────────────────────────────────────────────────────────────────
env:
  GO_BIN: $HOME/go/bin
  COVERAGE_THRESHOLD: 93
  TRIVY_VERSION: 0.63.0
  GOLANGCI_VERSION: v1.54.2
  GOSEC_VERSION: v2.19.0
  OSV_VERSION: v1.7.3

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
# ─────────────────────────────────────────────────────────────────────────────
#  1. Linter
# ─────────────────────────────────────────────────────────────────────────────
  lint:
    name: Lint
    runs-on: [self-hosted, linux]

    steps:
      # ─── safety net for self-hosted runners ───────────────────
      - name: Clean Go build & module cache (self-hosted)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/*      || true

      - name: Restore Go cache (ignore errors on self-hosted)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles(**/go.sum) }}
          restore-keys: |
            ${{ runner.os }}-go-
      # ─── safety net for self-hosted runners ───────────────────
      - name: Clean Go build & module cache (self-hosted)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/*      || true

      - name: Restore Go cache (ignore errors on self-hosted)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles(**/go.sum) }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Install golangci-lint ${{ env.GOLANGCI_VERSION }}
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@${{ env.GOLANGCI_VERSION }}
          echo "${{ env.GO_BIN }}" >> "$GITHUB_PATH"

      - name: Run linter
        run: golangci-lint run --timeout 5m

# ─────────────────────────────────────────────────────────────────────────────
#  2. Unit Tests + Coverage
# ─────────────────────────────────────────────────────────────────────────────
  test-matrix:
    name: Tests & Coverage
    needs: lint
    runs-on: [self-hosted, linux]
    strategy:
      matrix:
        go: ['1.24']

    steps:
      # ─── safety net for self-hosted runners ───────────────────
      - name: Clean Go build & module cache (self-hosted)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/*      || true

      - name: Restore Go cache (ignore errors on self-hosted)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles(**/go.sum) }}
          restore-keys: |
            ${{ runner.os }}-go-
      # ─── safety net for self-hosted runners ───────────────────
      - name: Clean Go build & module cache (self-hosted)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/*      || true

      - name: Restore Go cache (ignore errors on self-hosted)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles(**/go.sum) }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true

      - name: Add Go bin to PATH
        run: echo "${{ env.GO_BIN }}" >> "$GITHUB_PATH"

      - name: Run tests (fail if < ${{ env.COVERAGE_THRESHOLD }} %)
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...
          pct=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%","");print $3}')
          echo "total coverage = ${pct}%"
          if [[ ${pct%.*} -lt $COVERAGE_THRESHOLD ]]; then
            echo "::error ::coverage ${pct}% < ${COVERAGE_THRESHOLD}%" ; exit 1
          fi

      - name: Upload coverage artefact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.go }}
          path: coverage.out

# ─────────────────────────────────────────────────────────────────────────────
#  3. Security Gate
# ─────────────────────────────────────────────────────────────────────────────
  security:
    name: Security Scan
    needs: [lint, test-matrix]
    runs-on: [self-hosted, linux]

    steps:
      # ─── safety net for self-hosted runners ───────────────────
      - name: Clean Go build & module cache (self-hosted)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/*      || true

      - name: Restore Go cache (ignore errors on self-hosted)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles(**/go.sum) }}
          restore-keys: |
            ${{ runner.os }}-go-
      # ─── safety net for self-hosted runners ───────────────────
      - name: Clean Go build & module cache (self-hosted)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/*      || true

      - name: Restore Go cache (ignore errors on self-hosted)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles(**/go.sum) }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Install scanners
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@${{ env.GOSEC_VERSION }}
          go install github.com/google/osv-scanner/cmd/osv-scanner@${{ env.OSV_VERSION }}
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz \
            | tar -xzO trivy > /usr/local/bin/trivy
          chmod +x /usr/local/bin/trivy
          echo "${{ env.GO_BIN }}" >> "$GITHUB_PATH"

      - name: govulncheck
        run: govulncheck ./...

      - name: gosec
        run: gosec ./...

      - name: osv-scanner
        run: osv-scanner .

      - name: trivy filesystem scan
        run: |
          trivy fs --download-db-only
          trivy fs --exit-code 1 --severity HIGH,CRITICAL .

# ─────────────────────────────────────────────────────────────────────────────
#  4. Snapshot Release
# ─────────────────────────────────────────────────────────────────────────────
  snapshot:
    name: Goreleaser Snapshot
    needs: security
    runs-on: [self-hosted, linux]

    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      # ─── safety net for self-hosted runners ───────────────────
      - name: Clean Go build & module cache (self-hosted)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/*      || true

      - name: Restore Go cache (ignore errors on self-hosted)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles(**/go.sum) }}
          restore-keys: |
            ${{ runner.os }}-go-
      # ─── safety net for self-hosted runners ───────────────────
      - name: Clean Go build & module cache (self-hosted)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/*      || true

      - name: Restore Go cache (ignore errors on self-hosted)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles(**/go.sum) }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build binary
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p dist/linux_${GOARCH}
          GOOS=linux go build -trimpath -ldflags "-s -w" \
            -o dist/linux_${GOARCH}/ai-chat-cli ./cmd/ai-chat-cli

      - name: Install Goreleaser
        run: |
          curl -sSfL https://install.goreleaser.com/github.com/goreleaser/goreleaser@latest | sh -s -- -b /usr/local/bin

      - name: Snapshot packages (.deb/.rpm only for amd64)
        run: |
          if [[ "${{ matrix.arch }}" == "amd64" ]]; then
            goreleaser release --clean --snapshot --single-target \
              --id deb --id rpm --dist dist
          fi
          tar -C dist/linux_${{ matrix.arch }} -czf \
            dist/ai-chat-cli_snapshot_linux_${{ matrix.arch }}.tar.gz ai-chat-cli

      - uses: actions/upload-artifact@v4
        with:
          name: snapshot-linux-${{ matrix.arch }}
          path: dist/*
