name: CI

# ───────────────────────── Global settings ─────────────────────────
env:
  GO_BIN: $HOME/go/bin
  COVERAGE_THRESHOLD: 70
  TRIVY_VERSION: 0.63.0
  GOLANGCI_VERSION: 2.1.6
  GOSEC_VERSION: v2.19.0
  OSV_VERSION: v1.7.3

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

# ───────────────────────────── Jobs ────────────────────────────────
jobs:
  # ───────────────────────────── Lint ────────────────────────────────
  lint:
    runs-on: [self-hosted, linux]
    steps:
      - name: Fix permissions
        run: sudo chmod -R u+w ~/go/pkg/mod/ || true

      - name: Clean Go cache (self-heal)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/* || true
          # Self-heal: If directories still exist, remove again
          [ -d ~/.cache/go-build ] && find ~/.cache/go-build -type f -delete || echo "Go build cache gone"
          [ -d ~/go/pkg/mod ] && find ~/go/pkg/mod -type f -delete || echo "Go mod cache gone"
          ls -al ~/.cache/go-build || echo "Go build cache is empty"
          ls -al ~/go/pkg/mod || echo "Go mod cache is empty"

      - name: Restore Go cache (ignore errors)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      # ─── Self-heal: Reinstall Go dependencies ───
      - name: Reinstall Go dependencies (self-heal)
        run: |
          go mod tidy
          go mod vendor

      - name: Install golangci-lint ${{ env.GOLANGCI_VERSION }}
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends ca-certificates curl tar
          mkdir -p "$HOME/go/bin"
          sudo chown -R "$(id -u -n)":"$(id -g -n)" "$HOME/go"
          curl -sSfL \
            "https://github.com/golangci/golangci-lint/releases/download/v${{ env.GOLANGCI_VERSION }}/golangci-lint-${{ env.GOLANGCI_VERSION }}-linux-amd64.tar.gz" \
          | tar -xz --strip-components=1 -C "$HOME/go/bin" \
              "golangci-lint-${{ env.GOLANGCI_VERSION }}-linux-amd64/golangci-lint"
          echo "$HOME/go/bin" >> "$GITHUB_PATH"

      - name: Run linter
        run: golangci-lint run --timeout 5m

  # ─────────────────── Tests & Coverage (matrix) ────────────────────
  test-matrix:
    needs: lint
    runs-on: [self-hosted, linux]
    strategy:
      matrix: { go: ['1.24'] }
    steps:
      - name: Fix permissions
        run: sudo chmod -R u+w ~/go/pkg/mod/ || true

      - name: Clean Go cache (self-heal)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/* || true
          [ -d ~/.cache/go-build ] && find ~/.cache/go-build -type f -delete || echo "Go build cache gone"
          [ -d ~/go/pkg/mod ] && find ~/go/pkg/mod -type f -delete || echo "Go mod cache gone"
          ls -al ~/.cache/go-build || echo "Go build cache is empty"
          ls -al ~/go/pkg/mod || echo "Go mod cache is empty"

      - name: Restore Go cache (ignore errors)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true

      - run: echo "${{ env.GO_BIN }}" >> "$GITHUB_PATH"

      # ─── Self-heal: Reinstall Go dependencies ───
      - name: Reinstall Go dependencies (self-heal)
        run: |
          go mod tidy
          go mod vendor

      - name: Run tests (fail if coverage < ${{ env.COVERAGE_THRESHOLD }}%)
        run: |
          GORELEASER_SKIP=build,publish,validate \
            go test -race -covermode=atomic -coverprofile=coverage.out ./...
          pct=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%","");print $3}')
          echo "total coverage = ${pct}%"
          if [[ ${pct%.*} -lt $COVERAGE_THRESHOLD ]]; then
            echo "::error ::coverage ${pct}% < ${COVERAGE_THRESHOLD}%" ; exit 1
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.go }}
          path: coverage.out

  # ───────────────────────── Security Scan ──────────────────────────
  security:
    needs: [lint, test-matrix]
    runs-on: [self-hosted, linux]
    steps:
      - name: Fix permissions
        run: sudo chmod -R u+w ~/go/pkg/mod/ || true

      - name: Clean Go cache (self-heal)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/* || true
          [ -d ~/.cache/go-build ] && find ~/.cache/go-build -type f -delete || echo "Go build cache gone"
          [ -d ~/go/pkg/mod ] && find ~/go/pkg/mod -type f -delete || echo "Go mod cache gone"
          ls -al ~/.cache/go-build || echo "Go build cache is empty"
          ls -al ~/go/pkg/mod || echo "Go mod cache is empty"

      - name: Restore Go cache (ignore errors)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      # ─── Self-heal: Reinstall Go dependencies ───
      - name: Reinstall Go dependencies (self-heal)
        run: |
          go mod tidy
          go mod vendor

      - name: Install scanners
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install github.com/google/osv-scanner/cmd/osv-scanner@${{ env.OSV_VERSION }}
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz \
            | tar -xzO trivy > /usr/local/bin/trivy
          sudo chmod +x /usr/local/bin/trivy
          sudo chown "$(id -u -n):$(id -g -n)" /usr/local/bin/trivy
          echo "${{ env.GO_BIN }}" >> "$GITHUB_PATH"

      # ─── Self-heal: Verify Go environment ───
      - name: Verify Go environment (self-heal)
        run: go env

      # ─── Self-heal: GoSec with debug ───
      - name: Run GoSec with Debug
        run: gosec -debug ./...

      - name: Run other scanners
        run: |
          govulncheck ./...
          osv-scanner .
          trivy fs --download-db-only
          trivy fs --exit-code 1 --severity HIGH,CRITICAL .

  # ────────────────────── Goreleaser Snapshot ───────────────────────
  snapshot:
    needs: security
    runs-on: [self-hosted, linux]
    strategy:
      matrix: { arch: [amd64, arm64] }
    steps:
      - name: Fix permissions
        run: sudo chmod -R u+w ~/go/pkg/mod/ || true

      - name: Clean Go cache (self-heal)
        run: |
          rm -rf ~/.cache/go-build/* || true
          rm -rf ~/go/pkg/mod/* || true
          [ -d ~/.cache/go-build ] && find ~/.cache/go-build -type f -delete || echo "Go build cache gone"
          [ -d ~/go/pkg/mod ] && find ~/go/pkg/mod -type f -delete || echo "Go mod cache gone"
          ls -al ~/.cache/go-build || echo "Go build cache is empty"
          ls -al ~/go/pkg/mod || echo "Go mod cache is empty"

      - name: Restore Go cache (ignore errors)
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      # ─── Self-heal: Reinstall Go dependencies ───
      - name: Reinstall Go dependencies (self-heal)
        run: |
          go mod tidy
          go mod vendor

      - name: Build binary
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p dist/linux_${GOARCH}
          GOOS=linux go build -trimpath -ldflags "-s -w" \
            -o dist/linux_${GOARCH}/ai-chat-cli ./cmd/ai-chat-cli

      - name: Install Goreleaser
        run: |
          curl -sSfL https://install.goreleaser.com/github.com/goreleaser/goreleaser@latest | sh -s -- -b /usr/local/bin

      - name: Snapshot packages (.deb/.rpm only for amd64)
        run: |
          if [[ "${{ matrix.arch }}" == "amd64" ]]; then
            goreleaser release --clean --snapshot --single-target \
              --id deb --id rpm --dist dist
          fi
          tar -C dist/linux_${{ matrix.arch }} -czf \
            dist/ai-chat-cli_snapshot_linux_${{ matrix.arch }}.tar.gz ai-chat-cli

      - uses: actions/upload-artifact@v4
        with:
          name: snapshot-linux-${{ matrix.arch }}
          path: dist/*

      - name: Run tests (fail if coverage < ${{ env.COVERAGE_THRESHOLD }}%)
        shell: bash
        run: |
          GORELEASER_SKIP=build,publish,validate \
            go test -race -covermode=atomic -coverprofile=coverage.out ./...
          pct=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%","");print $3}')
          echo "total coverage = ${pct}%"
          if [[ ${pct%.*} -lt $COVERAGE_THRESHOLD ]]; then
            echo "::error ::coverage ${pct}% < ${COVERAGE_THRESHOLD}%" ; exit 1
