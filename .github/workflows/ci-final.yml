# .github/workflows/final-ci.yml
name: CI + Release

on:
  push:
    branches: [dev]
    tags:     ['v*']           # still run on version tags
  pull_request:
    branches: [dev]
  workflow_dispatch:

env:
  GO_BIN: $HOME/go/bin
  COVERAGE_THRESHOLD: 93
  TRIVY_VERSION: 0.63.0
  GOLANGCI_VERSION: 2.1.6
  GOSEC_VERSION: v2.19.0
  OSV_VERSION: v1.7.3

permissions:
  contents: write
  packages: write

# ─────────────────────────── Jobs ───────────────────────────
jobs:
  # 0 ── Detect if the workflow file itself changed ──────────
  changes:
    runs-on: ubuntu-latest
    outputs:
      ci_final: ${{ steps.filter.outputs.ci_final }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ci_final:
              - '.github/workflows/ci-final.yml'

  pipeline-guard:
    runs-on: ubuntu-latest
    needs: [changes]
    outputs:
      docs_only: ${{ steps.determine.outputs.docs_only }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - id: determine
        run: |
          BASE=${{ github.event.pull_request.base.sha || github.event.before }}
          if [ -z "$BASE" ]; then BASE=$(git rev-parse HEAD^); fi
          if go run -tags tools ./tools/ci-sieve -range "$BASE..HEAD"; then
            echo "docs_only=true" >> "$GITHUB_OUTPUT"
          else
            echo "docs_only=false" >> "$GITHUB_OUTPUT"
          fi

  # 1 ── Lint ────────────────────────────────────────────────
  lint:
    needs: [changes, pipeline-guard]
    if: needs.changes.outputs.ci_final != 'true' && needs.pipeline-guard.outputs.docs_only != 'true'
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Lint
        run: bash lint_cli.sh

  # 2 ── Docs ────────────────────────────────────────────────
  docs:
    needs: [changes, pipeline-guard, lint]
    if: needs.changes.outputs.ci_final != 'true' && needs.pipeline-guard.outputs.docs_only != 'true'
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install NPM packages
        run: npm install
      - name: Audit NPM packages
        run: npm audit
      - name: Build docs
        run: make docs

  # 3 ── Security ───────────────────────────────────────────
  security:
    needs: [changes, pipeline-guard, lint]
    if: needs.changes.outputs.ci_final != 'true' && needs.pipeline-guard.outputs.docs_only != 'true'
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@${{ env.GOSEC_VERSION }}
      - name: Run gosec
        run: gosec ./... || true
      - name: Install osv-scanner
        run: go install github.com/google/osv-scanner/cmd/osv-scanner@${{ env.OSV_VERSION }}
      - name: Run osv-scanner
        run: osv-scanner .
      - name: Install trivy
        run: |
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz \
            | sudo tar --overwrite -xz -C /usr/local/bin trivy
      - name: Run trivy
        run: |
          trivy fs --download-db-only
          trivy fs --exit-code 1 --severity HIGH,CRITICAL .

  # 4 ── Tests & Coverage ───────────────────────────────────
  test:
    needs: [changes, pipeline-guard, lint, docs]
    if: needs.changes.outputs.ci_final != 'true' && needs.pipeline-guard.outputs.docs_only != 'true'
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Run tests
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...
          pct=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%", ""); print $3}')
          echo "total coverage = ${pct}%"
          if [[ ${pct%.*} -lt $COVERAGE_THRESHOLD ]]; then
            echo "::error ::coverage ${pct}% < ${COVERAGE_THRESHOLD}%" && exit 1
          fi

  # 5 ── Verify go.sum ──────────────────────────────────────
  verify-go-sum:
    needs: [changes, pipeline-guard, test]
    if: needs.changes.outputs.ci_final != 'true' && needs.pipeline-guard.outputs.docs_only != 'true'
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v4
      - name: Verify go.sum
        run: test -f go.sum

  # 6 ── Release (runs on v* tags, never skipped) ───────────
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [changes, pipeline-guard, verify-go-sum]
    runs-on: [self-hosted, linux]

    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: GoReleaser release
        uses: goreleaser/goreleaser-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: v2.10.2
          args: release --clean          # builds tar.gz, .deb, .rpm

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
