###############################################################################
# CI – AI-Chat-Fedora42 · PR-only (dev) · fast · coverage-gate · security · docs
###############################################################################
name: CI – AI-Chat-Fedora42

on:
  pull_request:
    branches: [dev]          # run only for PRs into dev
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  pages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

###############################################################################
env:
  GO_VERSION:          "1.24.3"
  GOMAXPROCS:          "20"

  COVERAGE_GATE:       "80"   # hard floor
  COVERAGE_TOLERANCE:  "1"    # warn if within 1 pt below gate
###############################################################################

defaults:
  run:
    shell: bash -Eeuo pipefail {0}

###############################################################################
# 1 ▸ Coverage gate  (tests + threshold check)
###############################################################################
jobs:
  coverage-gate:
    runs-on: [self-hosted, Linux, X64]

    steps:
      - uses: actions/checkout@v4.2.2

      - uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Restore Go build cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: go-build-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-build-${{ env.GO_VERSION }}-

      - name: Run unit tests & collect coverage
        run: |
          export GOMAXPROCS=${GOMAXPROCS}
          go test -covermode=atomic -coverprofile=coverage.out ./...

      - name: Enforce coverage gate (${{ env.COVERAGE_GATE }} %)
        run: |
          pct=$(go tool cover -func coverage.out | awk '/^total:/ {gsub("%","");print $3}')
          echo "Total coverage: ${pct}%"
          if (( ${pct%.*} + COVERAGE_TOLERANCE < COVERAGE_GATE )); then
            echo "::error::coverage below ${COVERAGE_GATE}%"; exit 1
          elif (( ${pct%.*} < COVERAGE_GATE )); then
            echo "::warning::coverage slightly below gate – tolerated"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

###############################################################################
# 2 ▸ Security scan (gosec)
###############################################################################
  security-scan:
    needs: coverage-gate
    runs-on: [self-hosted, Linux, X64]

    steps:
      - uses: actions/checkout@v4.2.2

      - uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

###############################################################################
# 3 ▸ Docs generation (dev branch only)
###############################################################################
  docs:
    needs: security-scan
    if: github.ref == 'refs/heads/dev'
    runs-on: [self-hosted, Linux, X64]

    steps:
      - uses: actions/checkout@v4.2.2

      - uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Generate API documentation
        run: |
          go install github.com/princjef/gomarkdoc/cmd/gomarkdoc@latest
          mkdir -p docs
          gomarkdoc --output docs/api.md ./...

      - uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs
